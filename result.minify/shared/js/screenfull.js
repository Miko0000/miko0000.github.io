const screenfull=(()=>{const n=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],t=(()=>{if(typeof document=="undefined")return!1;const t=n[0],e={};for(const s of n){const o=s?.[1];if(o in document){for(const[n,o]of s.entries())e[t[n]]=o;return e}}return!1})(),s={change:t.fullscreenchange,error:t.fullscreenerror};let e={request(n=document.documentElement,s){return new Promise((o,i)=>{const a=()=>{e.off("change",a),o()};e.on("change",a);const r=n[t.requestFullscreen](s);r instanceof Promise&&r.then(a).catch(i)})},exit(){return new Promise((n,s)=>{if(!e.isFullscreen){n();return}const o=()=>{e.off("change",o),n()};e.on("change",o);const i=document[t.exitFullscreen]();i instanceof Promise&&i.then(o).catch(s)})},toggle(t,n){return e.isFullscreen?e.exit():e.request(t,n)},onchange(t){e.on("change",t)},onerror(t){e.on("error",t)},on(e,t){const n=s[e];n&&document.addEventListener(n,t,!1)},off(e,t){const n=s[e];n&&document.removeEventListener(n,t,!1)},raw:t};return Object.defineProperties(e,{isFullscreen:{get:()=>Boolean(document[t.fullscreenElement])},element:{enumerable:!0,get:()=>document[t.fullscreenElement]??void 0},isEnabled:{enumerable:!0,get:()=>Boolean(document[t.fullscreenEnabled])}}),t||(e={isEnabled:!1}),e})()